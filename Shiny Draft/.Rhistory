mutate(AMT_per_claim = AMT_Claim / NB_Claim)
gamma_post <- stan_glm(AMT_per_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = training_2,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = FALSE)
gamma_post <- stan_glm(AMT_per_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = training_subset,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = FALSE)
gamma_post <- stan_glm(AMT_per_claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = training_subset,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = FALSE)
summary(training_subset)
# poisson
print(mean(rowSums(pois_ll)))
# negative binomial
print(mean(rowSums(negbinom_ll)))
loo_compare(poisson_loo, negbinom_loo)
gamma_post <- stan_glm(NB_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = training_2,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = TRUE)
at_least_1 <- training_2 %>% filter(NB_Claim > 0)
gamma_post <- stan_glm(NB_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = at_least_1,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = TRUE)
gamma_prior <- stan_glm(NB_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = at_least_1,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = TRUE)
print(gamma_prior)
gamma_prior <- stan_glm(AMT_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = at_least_1,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = TRUE)
summary(at_least_1$AMT_Claim)
at_least_1 <- training_2 %>% filter(NB_Claim > 0) %>% mutate(AMT_Claim = ifelse(AMT_Claim == 0, 0.01, AMT_Claim)
gamma_prior <- stan_glm(AMT_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
at_least_1 <- training_2 %>% filter(NB_Claim > 0) %>% mutate(AMT_Claim = ifelse(AMT_Claim == 0, 0.01, AMT_Claim))
gamma_prior <- stan_glm(AMT_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = at_least_1,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = TRUE)
print(gamma_prior)
pp_check(gamma_prior)
pp_check(gamma_prior, fun = "bars")
pp_check(gamma_prior, plotfun = "bars")
pp_check(gamma_prior, plotfun = "scatter_avg")
pp_check(gamma_prior)
pp_check(gamma_prior, plotfun = "scatter_avg")
View(at_least_1)
at_least_1 <- training_2 %>% filter(NB_Claim > 0, AMT_Claim > 0)
gamma_prior <- stan_glm(AMT_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = at_least_1,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = TRUE)
print(gamma_prior)
pp_check(gamma_prior, plotfun = "scatter_avg")
training_subset <- training_2 %>%
filter(NB_Claim > 0, ) %>%
mutate(AMT_per_claim = AMT_Claim / NB_Claim)
gamma_post <- stan_glm(AMT_per_claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = training_subset,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = FALSE)
training_subset <- training_2 %>%
filter(NB_Claim > 0, AMT_CLaim > 0) %>%
mutate(AMT_per_claim = AMT_Claim / NB_Claim)
training_subset <- training_2 %>%
filter(NB_Claim > 0, AMT_Claim > 0) %>%
mutate(AMT_per_claim = AMT_Claim / NB_Claim)
gamma_post <- stan_glm(AMT_per_claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = training_subset,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = FALSE)
pp_check(gamma_post, plotfun = "scatter_avg")
gamma_prior_predictions <- posterior_predict(gamma_prior)
ggplot(tibble(AMT = c(gamma_prior_predictions))) + geom_density(aes(x = AMT))
Sys.getenv("BINPREF")
install.packages("RTools")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.which("make")
library(RTools)
Sys.which("make")
Sys.getenv("BINPREF")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("RTools")
?version
R.Version
R.version$os
R.version
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
library(haven)
library(brms)
library(rstanarm)
library(dplyr)
set.seed(1234)
options(mc.cores = parallel::detectCores())
library(haven)
library(brms)
library(rstanarm)
library(dplyr)
set.seed(1234)
options(mc.cores = parallel::detectCores())
if (!file.exists("GSS_2020_panel_stata_1a.zip")) {
download.file("https://gss.norc.org/Documents/stata/GSS_2020_panel_stata_1a.zip",
destfile = "GSS_2020_panel_stata_1a.zip")
unzip("GSS_2020_panel_stata_1a.zip")
}
GSS <- as_factor(read_dta(file.path("gss2020panel_r1a.dta")))
#unzip("anes_timeseries_2020_gss_stata_20220408.zip")
ANES <- as_factor(read_dta(file.path("anes_timeseries_2020_gss_stata_20220408.dta")))
ANES_GSS <- inner_join(ANES, GSS, by = c(YEARID = "yearid"))
# clean up data set to remove
ANES_GSS_clean <- ANES_GSS %>%
filter(!is.na(degree_1b)) %>%
filter(V202215 != "-9. Refused" &
V202215 != "-5. Interview breakoff (sufficient partial IW)") %>%
mutate(V202215_ordered = as.ordered(V202215),
degree_1b_ordered = as.ordered(factor(degree_1b,
levels = c("graduate",
"bachelor's",
"associate/junior college",
"high school",
"less than high school")))) %>%
select(V202215_ordered, degree_1b_ordered)
prior1 <- brms::brm(V202215_ordered ~ mo(degree_1b_ordered),
data = ANES_GSS_clean,
sample_prior = "only",
family = cumulative(link = "probit"),
prior = prior(normal(0,100), class = "b"),
seed = 10001,
iter = 5000,
chains = 4)
prior1
prior_draws <- posterior_predict(prior1)
summary(colMeans(prior_draws))
post <- brms::brm(V202215_ordered ~ mo(degree_1b_ordered),
data = ANES_GSS_clean,
family = cumulative(link = "probit"),
prior = prior(normal(0,100), class = "b"),
seed = 10001,
chains = 2)
post
plot(conditional_effects(post, effects = "degree_1b_ordered", categorical = FALSE))
plot(loo(post))
alt_post <- brms::brm(V202215_ordered ~ degree_1b_ordered,
data = ANES_GSS_clean,
family = cumulative(link = "probit"),
prior = prior(normal(0,100), class = "b"),
seed = 10001,
chains = 3)
plot(loo(alt_post))
post <- add_criterion(post, criterion = "loo")
alt_post <- add_criterion(alt_post, criterion = "loo")
loo_compare(post, alt_post)
posterior_draws <- posterior_predict(post)
summary(colMeans(posterior_draws))
summary(ANES_GSS_clean$degree_1b_ordered)
summary(ANES_GSS_clean$V202215_ordered)
shiny::runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
setwd("~/GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft")
### load data sources ###
single_family_homes <- read.csv("../data/single_family_homes_time_series.csv")
HPI <- read.csv("../data/HPI_data.csv")
bottom_tier <- read.csv("../data/all_homes_bottom_tier.csv")
ZCTA_list <- c('70112', '70113', '70114', '70115', '70116', '70117', '70118', '70119',
'70121', '70122', '70123', '70124', '70125', '70126', '70127', '70128',
'70129', '70130','70131', '70139', '70163', '95401', '95403', '95404',
'95405', '95407', '95409', '14201', '14202', '14203', '14204', '14206',
'14207', '14208', '14209', '14210', '14211', '14212', '14213', '14214',
'14215', '14216', '14217', '14218', '14219', '14220', '14221','14222',
'14223', '14224', '14225', '14226', '14227', '14228', '14261', '73160',
'73165', '73170', '70358')
new_orleans_zips <- c('70112', '70113', '70114', '70115', '70116', '70117', '70118', '70119',
'70121', '70122', '70123', '70124', '70125', '70126', '70127', '70128',
'70129', '70130','70131', '70139', '70163')
moore_zips <- c("73160", "73165", "73170")
coffey_zips <- c("95401", "95402", "95403", "95404", "95405", "95406", "95407", "95409")
buffalo_zips <- c('14201', '14202', '14203','14204', '14206', '14207', '14208',
'14209', '14210', '14211', '14212', '14213', '14214', '14215', '14216',
'14217', '14218', '14219', '14220', '14221','14222', '14223', '14224',
'14225', '14226', '14227', '14228', '14261')
grand_isle_zips <- c("70358")
## HPI ##
HPI <- HPI %>%
filter(zip_code %in% ZCTA_list) # refine the list so the data is smaller
months <- expand.grid(year = unique(HPI$year),
month = c("01","02","03","04","05","06",
"07", "08", "09", "10", "11", "12"))
HPI <- left_join(HPI, months, by = "year") %>%
mutate(date = as.Date(paste0(month, "/01/", year), "%m/%d/%y")) %>%
select(zip_code, date, HPI_2000, HPI, annual_change) %>%
mutate(zip_code = as.character(zip_code),
HPI_2000 = as.numeric(HPI_2000),
HPI = as.numeric(HPI),
annual_change = as.numeric(annual_change))
# a curated list of zip codes missing from our data
missing_zips <- c('70112', '14203', '14204') %>%
as.data.frame() %>%
rename(zip_code = '.') %>%
mutate(date = NA,
single_fam_val = NA,
bottom_tier = NA,
HPI_2000 = NA,
HPI = NA,
annual_change = NA)
# join all the real estate data #
base_data <- single_family_homes %>%
left_join(bottom_tier, by = c("region_id", "date")) %>%
select(region_id, date, value.x, value.y) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
mutate(date = date + 1) %>% # add a day so that it begins on the first of the month
rename("zip_code" = "region_id",
"single_fam_val" = "value.x",
"bottom_tier" = "value.y") %>%
mutate(zip_code = as.character(zip_code)) %>%
filter(zip_code %in% ZCTA_list) %>% # refine the list so the data is smaller
full_join(HPI, by = c("zip_code", "date")) %>%
filter(date > as.Date('2000-01-01', "%Y-%m-%d")) %>%
rbind(missing_zips) %>%
tidyr::complete(date, zip_code) # create months for zip codes missing from our data set
library(tidyr)
library(dplyr)
## HPI ##
HPI <- HPI %>%
filter(zip_code %in% ZCTA_list) # refine the list so the data is smaller
months <- expand.grid(year = unique(HPI$year),
month = c("01","02","03","04","05","06",
"07", "08", "09", "10", "11", "12"))
HPI <- left_join(HPI, months, by = "year") %>%
mutate(date = as.Date(paste0(month, "/01/", year), "%m/%d/%y")) %>%
select(zip_code, date, HPI_2000, HPI, annual_change) %>%
mutate(zip_code = as.character(zip_code),
HPI_2000 = as.numeric(HPI_2000),
HPI = as.numeric(HPI),
annual_change = as.numeric(annual_change))
# a curated list of zip codes missing from our data
missing_zips <- c('70112', '14203', '14204') %>%
as.data.frame() %>%
rename(zip_code = '.') %>%
mutate(date = NA,
single_fam_val = NA,
bottom_tier = NA,
HPI_2000 = NA,
HPI = NA,
annual_change = NA)
# join all the real estate data #
base_data <- single_family_homes %>%
left_join(bottom_tier, by = c("region_id", "date")) %>%
select(region_id, date, value.x, value.y) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
mutate(date = date + 1) %>% # add a day so that it begins on the first of the month
rename("zip_code" = "region_id",
"single_fam_val" = "value.x",
"bottom_tier" = "value.y") %>%
mutate(zip_code = as.character(zip_code)) %>%
filter(zip_code %in% ZCTA_list) %>% # refine the list so the data is smaller
full_join(HPI, by = c("zip_code", "date")) %>%
filter(date > as.Date('2000-01-01', "%Y-%m-%d")) %>%
rbind(missing_zips) %>%
tidyr::complete(date, zip_code) # create months for zip codes missing from our data set
View(base_data)
write.csv(base_data, file = "base_data", row.names = FALSE, col.names = TRUE, sep = ",")
write.csv(base_data, file = "base_data", row.names = FALSE)
# join all the real estate data #
base_data <- single_family_homes %>%
left_join(bottom_tier, by = c("region_id", "date")) %>%
select(region_id, date, value.x, value.y) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
mutate(date = date + 1) %>% # add a day so that it begins on the first of the month
rename("zip_code" = "region_id",
"single_fam_val" = "value.x",
"bottom_tier" = "value.y") %>%
mutate(zip_code = as.character(zip_code)) %>%
filter(zip_code %in% ZCTA_list) %>% # refine the list so the data is smaller
left_join(HPI, by = c("zip_code", "date")) %>%
filter(date > as.Date('2000-01-01', "%Y-%m-%d")) %>%
rbind(missing_zips) %>%
tidyr::complete(date, zip_code) # create months for zip codes missing from our data set
View(base_data)
View(HPI)
View(single_family_homes)
# join all the real estate data #
base_data <- single_family_homes %>%
left_join(bottom_tier, by = c("region_id", "date")) %>%
select(region_id, date, value.x, value.y) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
mutate(date = date + 1) %>% # add a day so that it begins on the first of the month
rename("zip_code" = "region_id",
"single_fam_val" = "value.x",
"bottom_tier" = "value.y") %>%
mutate(zip_code = as.character(zip_code)) %>%
filter(zip_code %in% ZCTA_list) %>% # refine the list so the data is smaller
right_join(HPI, by = c("zip_code", "date")) %>%
filter(date > as.Date('2000-01-01', "%Y-%m-%d")) %>%
rbind(missing_zips) %>%
tidyr::complete(date, zip_code) # create months for zip codes missing from our data set
View(base_data)
# join all the real estate data #
base_data <- single_family_homes %>%
left_join(bottom_tier, by = c("region_id", "date")) %>%
select(region_id, date, value.x, value.y) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
mutate(date = date + 1) %>% # add a day so that it begins on the first of the month
rename("zip_code" = "region_id",
"single_fam_val" = "value.x",
"bottom_tier" = "value.y") %>%
mutate(zip_code = as.character(zip_code)) %>%
filter(zip_code %in% ZCTA_list) %>% # refine the list so the data is smaller
left_join(HPI, by = c("zip_code", "date")) %>%
filter(date > as.Date('2000-01-01', "%Y-%m-%d")) %>%
rbind(missing_zips) %>%
tidyr::complete(date, zip_code) # create months for zip codes missing from our data set
View(HPI)
View(single_family_homes)
View(base_data)
# join all the real estate data #
base_data <- single_family_homes %>%
left_join(bottom_tier, by = c("region_id", "date")) %>%
select(region_id, date, value.x, value.y) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
mutate(date = date + 1) %>% # add a day so that it begins on the first of the month
rename("zip_code" = "region_id",
"single_fam_val" = "value.x",
"bottom_tier" = "value.y") %>%
mutate(zip_code = as.character(zip_code)) %>%
filter(zip_code %in% ZCTA_list) %>% # refine the list so the data is smaller
right_join(HPI, by = c("zip_code", "date")) %>%
filter(date > as.Date('2000-01-01', "%Y-%m-%d")) %>%
rbind(missing_zips) %>%
tidyr::complete(date, zip_code) # create months for zip codes missing from our data set
View(base_data)
View(HPI)
HPI <- read.csv("../data/HPI_data.csv")
View(HPI)
## HPI ##
HPI <- HPI %>%
filter(zip_code %in% ZCTA_list) # refine the list so the data is smaller
months <- expand.grid(year = unique(HPI$year),
month = c("01","02","03","04","05","06",
"07", "08", "09", "10", "11", "12"))
View(HPI)
HPI_new <- left_join(HPI, months, by = "year") %>%
mutate(date = as.Date(paste0(month, "/01/", year), "%m/%d/%y")) %>%
select(zip_code, date, HPI_2000, HPI, annual_change) %>%
mutate(zip_code = as.character(zip_code),
HPI_2000 = as.numeric(HPI_2000),
HPI = as.numeric(HPI),
annual_change = as.numeric(annual_change))
View(HPI_new)
View(HPI)
View(months)
left_join(HPI, months, by = "year")
View(HPI_new)
left_join(HPI, months, by = "year") %>%
mutate(date = as.Date(paste0(month, "/01/", year), "%m/%d/%y")) %>%
select(zip_code, date, HPI_2000, HPI, annual_change)
View(HPI)
HPI_new <- left_join(HPI, months, by = "year") %>%
mutate(date = as.Date(paste0(month, "/01/", year), "%m/%d/%Y")) %>%
select(zip_code, date, HPI_2000, HPI, annual_change) %>%
mutate(zip_code = as.character(zip_code),
HPI_2000 = as.numeric(HPI_2000),
HPI = as.numeric(HPI),
annual_change = as.numeric(annual_change))
View(HPI_new)
# a curated list of zip codes missing from our data
missing_zips <- c('70112', '14203', '14204') %>%
as.data.frame() %>%
rename(zip_code = '.') %>%
mutate(date = NA,
single_fam_val = NA,
bottom_tier = NA,
HPI_2000 = NA,
HPI = NA,
annual_change = NA)
# join all the real estate data #
base_data <- single_family_homes %>%
left_join(bottom_tier, by = c("region_id", "date")) %>%
select(region_id, date, value.x, value.y) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
mutate(date = date + 1) %>% # add a day so that it begins on the first of the month
rename("zip_code" = "region_id",
"single_fam_val" = "value.x",
"bottom_tier" = "value.y") %>%
mutate(zip_code = as.character(zip_code)) %>%
filter(zip_code %in% ZCTA_list) %>% # refine the list so the data is smaller
right_join(HPI, by = c("zip_code", "date")) %>%
filter(date > as.Date('2000-01-01', "%Y-%m-%d")) %>%
rbind(missing_zips) %>%
tidyr::complete(date, zip_code) # create months for zip codes missing from our data set
HPI <- left_join(HPI, months, by = "year") %>%
mutate(date = as.Date(paste0(month, "/01/", year), "%m/%d/%Y")) %>%
select(zip_code, date, HPI_2000, HPI, annual_change) %>%
mutate(zip_code = as.character(zip_code),
HPI_2000 = as.numeric(HPI_2000),
HPI = as.numeric(HPI),
annual_change = as.numeric(annual_change))
# a curated list of zip codes missing from our data
missing_zips <- c('70112', '14203', '14204') %>%
as.data.frame() %>%
rename(zip_code = '.') %>%
mutate(date = NA,
single_fam_val = NA,
bottom_tier = NA,
HPI_2000 = NA,
HPI = NA,
annual_change = NA)
# join all the real estate data #
base_data <- single_family_homes %>%
left_join(bottom_tier, by = c("region_id", "date")) %>%
select(region_id, date, value.x, value.y) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
mutate(date = date + 1) %>% # add a day so that it begins on the first of the month
rename("zip_code" = "region_id",
"single_fam_val" = "value.x",
"bottom_tier" = "value.y") %>%
mutate(zip_code = as.character(zip_code)) %>%
filter(zip_code %in% ZCTA_list) %>% # refine the list so the data is smaller
right_join(HPI, by = c("zip_code", "date")) %>%
filter(date > as.Date('2000-01-01', "%Y-%m-%d")) %>%
rbind(missing_zips) %>%
tidyr::complete(date, zip_code) # create months for zip codes missing from our data set
View(base_data)
# join all the real estate data #
base_data <- single_family_homes %>%
left_join(bottom_tier, by = c("region_id", "date")) %>%
select(region_id, date, value.x, value.y) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
mutate(date = date + 1) %>% # add a day so that it begins on the first of the month
rename("zip_code" = "region_id",
"single_fam_val" = "value.x",
"bottom_tier" = "value.y") %>%
mutate(zip_code = as.character(zip_code)) %>%
filter(zip_code %in% ZCTA_list) %>% # refine the list so the data is smaller
right_join(HPI, by = c("zip_code", "date")) %>%
filter(date > as.Date('2000-01-01', "%Y-%m-%d")) %>%
rbind(missing_zips) %>%
tidyr::complete(date, zip_code) %>%
arrange(zip_code, date)# create months for zip codes missing from our data set
View(base_data)
write.csv(base_data, "base_data.csv", row.names = FALSE)
shiny::runApp()
View(base_data)
View(HPI)
View(bottom_tier)
View(single_family_homes)
# join all the real estate data #
base_data <- single_family_homes %>%
left_join(bottom_tier, by = c("region_id", "date")) %>%
select(region_id, date, value.x, value.y) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
mutate(date = date + 1) %>% # add a day so that it begins on the first of the month
rename("zip_code" = "region_id",
"single_fam_val" = "value.x",
"bottom_tier" = "value.y") %>%
mutate(zip_code = as.character(zip_code)) %>%
filter(zip_code %in% ZCTA_list) %>% # refine the list so the data is smaller
full_join(HPI, by = c("zip_code", "date")) %>%
rbind(missing_zips) %>%
filter(date > as.Date('2000-01-01', "%Y-%m-%d")) %>%
tidyr::complete(date, zip_code) %>%
arrange(zip_code, date)# create months for zip codes missing from our data set
View(base_data)
runApp()
base_data <- single_family_homes %>%
left_join(bottom_tier, by = c("region_id", "date")) %>%
select(region_id, date, value.x, value.y) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
mutate(date = date + 1) %>% # add a day so that it begins on the first of the month
rename("zip_code" = "region_id",
"single_fam_val" = "value.x",
"bottom_tier" = "value.y") %>%
mutate(zip_code = as.character(zip_code)) %>%
filter(zip_code %in% ZCTA_list) %>% # refine the list so the data is smaller
full_join(HPI, by = c("zip_code", "date"))
View(base_data)
View(missing_zips)
runApp()
write.csv(base_data, "base_data.csv", row.names = FALSE)
