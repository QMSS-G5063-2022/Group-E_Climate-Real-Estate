unsuccessterms$success <- 'unsuccessful'
unsuccessterms <- arrange(unsuccessterms,n) %>% arrange(n)
unsuccessterms$n <- -1*(unsuccessterms$n)
terms <- rbind(successterms, unsuccessterms)
terms$n <- as.integer(terms$n)
terms$frequency <- ifelse(terms$n < 0, (-1)*terms$n, terms$n)
termsa <- aggregate(frequency ~ term, terms, sum, na.rm=TRUE) %>% arrange(desc(frequency))
termsb <- merge(terms, termsa, by='term')
termsb <- termsb %>% arrange(desc(frequency.y)) %>% top_n(30, frequency.y)
ggplot(termsb, aes(x=reorder(term,n),y=n, fill=success)) +
geom_bar(data=filter(termsb, success=='successful'), stat='identity') +
geom_bar(data=filter(termsb, success=='unsuccessful'), stat='identity') +
coord_flip() +
geom_col() +
scale_y_continuous(breaks=seq(-150,150,25)) +
labs(title = "Pyramid Plot of Top 16 Words From Kickstarter Projects",
x = "Words", y = "Count")
read <- textstat_readability(as.character(success$blurb), measure=c('Flesch','Flesch.Kincaid','meanSentenceLength','meanWordSyllables'))
read[colnames(success)] <- success
y <- rnorm(10) * 100000
ggplot(read, aes(x=Flesch,y=pledged,color=state)) + geom_jitter() + geom_col() + scale_y_continuous(labels=comma)
ggplot(read, aes(x=Flesch,y=backers_count,color=state)) + geom_jitter() + geom_col() + scale_y_continuous(labels=comma)
pos <- read.table('positive-words.txt', as.is=T)
neg <- read.table('negative-words.txt', as.is=T)
pos[1:15,]
neg[1:15,]
sentiment <- function(words=c("really great good stuff bad")){
require(quanteda)
tok <- quanteda::tokens(words)
pos.count <- sum(tok[[1]]%in%pos[,1])
neg.count <- sum(tok[[1]]%in%neg[,1])
out <- (pos.count - neg.count)/(pos.count+neg.count)
pos_words <- tok[[1]][which(tok[[1]] %in% pos[,1])]
neg_words <- tok[[1]][which(tok[[1]] %in% neg[,1])]
return(list(pos.count, neg.count, out, list(pos_words), list(neg_words)))
}
success$pos <- NA
success$neg <- NA
success$out <- NA
success$pos_words <- NA
success$neg_words <- NA
for(i in 1:length(success$blurb)) {
temp_sent <- sentiment(as.character(success$blurb[[i]]))
success$pos[[i]] <- temp_sent[[1]]
success$neg[[i]] <- temp_sent[[2]]
success$out[[i]] <- temp_sent[[3]]
success$pos_words[[i]] <- toString(unlist(temp_sent[[4]]))
success$neg_words[[i]] <- toString(unlist(temp_sent[[5]]))
}
success_tone <- success %>%
filter(!is.nan(out))
unsuccess$pos <- NA
unsuccess$neg <- NA
unsuccess$out <- NA
unsuccess$pos_words <- NA
unsuccess$neg_words <- NA
for(i in 1:length(unsuccess$blurb)) {
temp_sent <- sentiment(as.character(success$blurb[[i]]))
unsuccess$pos[[i]] <- temp_sent[[1]]
unsuccess$neg[[i]] <- temp_sent[[2]]
unsuccess$out[[i]] <- temp_sent[[3]]
unsuccess$pos_words[[i]] <- toString(unlist(temp_sent[[4]]))
unsuccess$neg_words[[i]] <- toString(unlist(temp_sent[[5]]))
}
unsuccess_tone <- unsuccess %>%
filter(!is.nan(out))
y <- rnorm(10) * 100000
x <- seq(0,1,length=10)
ggplot(success_tone, aes(x=out, y=backers_count)) + labs(title = 'Sentiment vs Amount of Backers', x='sentiment', y='amount of backers') + geom_col() + coord_flip()+ scale_y_continuous(labels=comma)
tone <- rbind(success_tone, unsuccess_tone)
tone <- filter(tone, out != 0)
positive <- paste(filter(tone, out == 1)$blurb, collapse = '')
negative <- paste(filter(tone, out == -1)$blurb, collapse = '')
positive
negative
doc_id <- c(1,2)
posnev <- data.frame(doc_id, text=c(positive, negative), stringAsFactors=FALSE)
posnev
posnev <- DataframeSource(posnev)
posnevcorpus <- VCorpus(posnev)
posnevtidy <- tidy(posnevcorpus)
posnevclean <- posnevtidy$text %>% tolower() %>% removePunctuation() %>% removeNumbers() %>% stripWhitespace() %>% removeWords(stopwords('en'))
posnevvector <- VectorSource(posnevclean)
posnevcorp <- VCorpus(posnevvector)
posnevtmd<- TermDocumentMatrix(posnevcorp)
posnevm <- as.matrix(posnevtmd)
comparison.cloud(posnevm,colors=c('blue','red'), scale=c(0.05,2),title.size=1,max.words=50)
bing <- tidytext::sentiments
bingcols <- unique(bing$sentiment)
bingcols <- bingcols[!is.na(bingcols)]
posnev1 <- rbind(success, unsuccess)
posnev1[bingcols] <- 0
posnev1
#anger, anticipation, disgust, fear, joy, sadness, surprise, trust
for(i in 1:length(posnev1$blurb)) {
tok <- tokens(as.character(posnev1$blurb[[i]]))
posnev1$anger[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='anger')$word)
posnev1$anticipation[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='anticipation')$word)
posnev1$disgust[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='disgust')$word)
posnev1$fear[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='fear')$word)
posnev1$joy[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='joy')$word)
posnev1$sadness[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='sadness')$word)
posnev1$surprise[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='surprise')$word)
posnev1$trust[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='trust')$word)
}
read <- textstat_readability(as.character(success$blurb), measure=c('Flesch','Flesch.Kincaid','meanSentenceLength','meanWordSyllables'))
read[colnames(success)] <- success
y <- rnorm(10) * 100000
ggplot(read, aes(x=Flesch,y=pledged,color=state)) + geom_col() + scale_y_continuous(labels=comma)
ggplot(read, aes(x=Flesch,y=backers_count,color=state)) + geom_col() + scale_y_continuous(labels=comma)
read <- textstat_readability(as.character(success$blurb), measure=c('Flesch','Flesch.Kincaid','meanSentenceLength','meanWordSyllables'))
read[colnames(success)] <- success
y <- rnorm(10) * 100000
ggplot(read, aes(x=Flesch,y=pledged,color=state)) + geom_col() + scale_y_continuous(labels=comma) + labs(title='Flesch Score vs Pledged Amount')
ggplot(read, aes(x=Flesch,y=backers_count,color=state)) + geom_col() + scale_y_continuous(labels=comma) + labs(title='Flesch Score vs Amount of Backers')
bing <- tidytext::sentiments
bingcols <- unique(bing$sentiment)
bingcols <- bingcols[!is.na(bingcols)]
posnev1 <- rbind(success, unsuccess)
posnev1[bingcols] <- 0
posnev1
#anger, anticipation, disgust, fear, joy, sadness, surprise, trust
for(i in 1:length(posnev1$blurb)) {
tok <- tokens(as.character(posnev1$blurb[[i]]))
posnev1$anger[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='anger')$word)
posnev1$anticipation[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='anticipation')$word)
posnev1$disgust[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='disgust')$word)
posnev1$fear[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='fear')$word)
posnev1$joy[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='joy')$word)
posnev1$sadness[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='sadness')$word)
posnev1$surprise[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='surprise')$word)
posnev1$trust[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='trust')$word)
}
posnev1$emotion <- colnames(posnev1[bingcols])[apply(posnev1[bingcols],1,which.max)]
x <- rnorm(10) * 100000
y <- seq(0,1,length=10)
ggplot(posnev1, aes(x=pledged, y=backers_count, color=emotion)) + geom_col() + scale_x_continuous(labels=comma) + labs(title='Pledged vs Number of Backers Based on Emotions',y='amount of backers',x='pledged')
bing <- tidytext::sentiments
bingcols <- unique(bing$sentiment)
bingcols <- bingcols[!is.na(bingcols)]
posnev1 <- rbind(success, unsuccess)
posnev1[bingcols] <- 0
posnev1
#anger, anticipation, disgust, fear, joy, sadness, surprise, trust, positive, happy
for(i in 1:length(posnev1$blurb)) {
tok <- tokens(as.character(posnev1$blurb[[i]]))
posnev1$anger[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='anger')$word)
posnev1$anticipation[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='anticipation')$word)
posnev1$disgust[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='disgust')$word)
posnev1$fear[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='fear')$word)
posnev1$joy[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='joy')$word)
posnev1$sadness[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='sadness')$word)
posnev1$surprise[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='surprise')$word)
posnev1$trust[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='trust')$word)
posnev1$happy[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='happy')$word)
posnev1$positive[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='positive')$word)
posnev1$negative[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='negative')$word)
}
posnev1$emotion <- colnames(posnev1[bingcols])[apply(posnev1[bingcols],1,which.max)]
x <- rnorm(10) * 100000
y <- seq(0,1,length=10)
ggplot(posnev1, aes(x=pledged, y=backers_count, color=emotion)) + geom_col() + scale_x_continuous(labels=comma) + labs(title='Pledged vs Number of Backers Based on Emotions',y='amount of backers',x='pledged')
kick1 <- kick %>% select(state, backers_count, pledged, top_category, blurb, id)
kick1 <- aggregate(backers_count~top_category + state, kick1, sum, na.rm=TRUE) %>% arrange(desc(backers_count))
kick1
y <- rnorm(10) * 100000
x <- seq(0,1,length=10)
kick1 %>% mutate(top_category = fct_reorder(top_category, backers_count)) %>% ggplot(aes(x = top_category,
y = backers_count, fill = state)) +
geom_col() +
coord_flip()+ scale_y_continuous(labels=comma) +
labs(title = "Number of Backers for Kickstarter Categories",
x = "Category", y = "Number of Backers")
kick1 <- aggregate(pledged~top_category + state, kick1, sum, na.rm=TRUE) %>% arrange(desc(pledged))
kick1 <- kick %>% select(state, backers_count, pledged, top_category, blurb, id)
kick1 <- aggregate(backers_count~top_category + state, kick1, sum, na.rm=TRUE) %>% arrange(desc(backers_count))
kick1
y <- rnorm(10) * 100000
x <- seq(0,1,length=10)
kick1 %>% mutate(top_category = fct_reorder(top_category, backers_count)) %>% ggplot(aes(x = top_category,
y = backers_count, fill = state)) +
geom_col() +
coord_flip()+ scale_y_continuous(labels=comma) +
labs(title = "Number of Backers for Kickstarter Categories",
x = "Category", y = "Number of Backers")
y <- rnorm(10) * 100000
x <- seq(0,1,length=10)
kick1 %>% mutate(top_category = fct_reorder(top_category, pledged)) %>% ggplot(aes(x = top_category,
y = pledged, fill = state)) +
geom_col() +
coord_flip()+ scale_y_continuous(labels=comma) +
labs(title = "Anmount Pledged for Kickstarter Categories",
x = "Category", y = "Number of Backers")
kick1 <- kick %>% select(state, backers_count, pledged, top_category, blurb, id)
kick1 <- aggregate(backers_count~top_category + state, kick1, sum, na.rm=TRUE) %>% arrange(desc(backers_count))
kick1
y <- rnorm(10) * 100000
x <- seq(0,1,length=10)
kick1 %>% mutate(top_category = fct_reorder(top_category, backers_count)) %>% ggplot(aes(x = top_category,
y = backers_count, fill = state)) +
geom_col() +
coord_flip()+ scale_y_continuous(labels=comma) +
labs(title = "Number of Backers for Kickstarter Categories",
x = "Category", y = "Number of Backers")
kick1 <- aggregate(pledged~top_category + state, kick1, sum, na.rm=TRUE) %>% arrange(desc(pledged))
kick1 <- kick %>% select(state, backers_count, pledged, top_category, blurb, id)
kick1a <- aggregate(backers_count~top_category + state, kick1, sum, na.rm=TRUE) %>% arrange(desc(backers_count))
kick1a
y <- rnorm(10) * 100000
x <- seq(0,1,length=10)
kick1a %>% mutate(top_category = fct_reorder(top_category, backers_count)) %>% ggplot(aes(x = top_category,
y = backers_count, fill = state)) +
geom_col() +
coord_flip()+ scale_y_continuous(labels=comma) +
labs(title = "Number of Backers for Kickstarter Categories",
x = "Category", y = "Number of Backers")
kick1aa <- aggregate(pledged~top_category + state, kick1, sum, na.rm=TRUE) %>% arrange(desc(pledged))
y <- rnorm(10) * 100000
x <- seq(0,1,length=10)
kick1aa %>% mutate(top_category = fct_reorder(top_category, pledged)) %>% ggplot(aes(x = top_category,
y = pledged, fill = state)) +
geom_col() +
coord_flip()+ scale_y_continuous(labels=comma) +
labs(title = "Anmount Pledged for Kickstarter Categories",
x = "Category", y = "Number of Backers")
library(psych)
library(plyr)
library(ggplot2)
library(gmodels)
library(tm)
library(quanteda)
library(tidytext)
library(dplyr)
library(scales)
library(forcats)
library(stringr)
library(wordcloud)
library(quanteda.textstats)
kick <- read.csv('kickstarter_projects_2021-05.csv')
kick1 <- kick %>% select(state, backers_count, pledged, top_category, blurb, id)
kick1a <- aggregate(backers_count~top_category + state, kick1, sum, na.rm=TRUE) %>% arrange(desc(backers_count))
kick1a
y <- rnorm(10) * 100000
x <- seq(0,1,length=10)
kick1a %>% mutate(top_category = fct_reorder(top_category, backers_count)) %>% ggplot(aes(x = top_category,
y = backers_count, fill = state)) +
geom_col() +
coord_flip()+ scale_y_continuous(labels=comma) +
labs(title = "Number of Backers for Kickstarter Categories",
x = "Category", y = "Number of Backers")
kick1aa <- aggregate(pledged~top_category + state, kick1, sum, na.rm=TRUE) %>% arrange(desc(pledged))
y <- rnorm(10) * 100000
x <- seq(0,1,length=10)
kick1aa %>% mutate(top_category = fct_reorder(top_category, pledged)) %>% ggplot(aes(x = top_category,
y = pledged, fill = state)) +
geom_col() +
coord_flip()+ scale_y_continuous(labels=comma) +
labs(title = "Anmount Pledged for Kickstarter Categories",
x = "Category", y = "Number of Backers")
success <- kick %>% group_by(backers_count, pledged) %>% arrange(desc(backers_count), desc(pledged))
success <- success[!(duplicated(success$id)),]
unsuccess <- tail(success, 1000)
success <- success[1:1000,]
#successful
successtext <- data.frame(doc_id=c(1:1000), text=success$blurb, meta=1:1000, stringAsFactors=FALSE)
successsource <- DataframeSource(successtext)
successcorpus <- VCorpus(successsource)
successtidy <- tidy(successcorpus)
successclean <- successtidy$text %>% tolower() %>% removePunctuation() %>% removeNumbers() %>% stripWhitespace() %>% removeWords(stopwords('en'))
successvector <- VectorSource(successclean)
successcorp <- VCorpus(successvector)
successdtm <- DocumentTermMatrix(successcorp)
successmatrix <- as.matrix(successdtm)
dim(successmatrix)
successmatrix[1:5, 100:150]
#unsuccessful
unsuccesstext <- data.frame(doc_id=c(1:1000), text=unsuccess$blurb, meta=1:1000, stringAsFactors=FALSE)
unsuccesssource <- DataframeSource(unsuccesstext)
unsuccesscorpus <- VCorpus(unsuccesssource)
unsuccesstidy <- tidy(unsuccesscorpus)
unsuccessclean <- unsuccesstidy$text %>% tolower() %>% removePunctuation() %>% removeNumbers() %>% stripWhitespace() %>% removeWords(stopwords('en'))
unsuccessvector <- VectorSource(unsuccessclean)
unsuccesscorp <- VCorpus(unsuccessvector)
unsuccessdtm <- DocumentTermMatrix(unsuccesscorp)
unsuccessmatrix <- as.matrix(unsuccessdtm)
dim(unsuccessmatrix)
unsuccessmatrix[1:5, 100:150]
#wordcloud
successdtm <- tidy(successdtm)
successterms <- successdtm %>% group_by(term) %>% summarize(n = sum(count)) %>% top_n(n=100, wt=n)
wordcloud(words=successterms$term, freq=as.integer(successterms$n), scale=c(4,1),min.freq=0, max.words=100, colors=brewer.pal(5,'Dark2'))
unsuccessdtm <- tidy(unsuccessdtm)
unsuccessterms <- unsuccessdtm %>% group_by(term) %>% summarize(n = sum(count)) %>% top_n(n=100, wt=n)
wordcloud(words=unsuccessterms$term, freq=as.integer(unsuccessterms$n), scale=c(4,1),min.freq=0, max.words=100, colors=brewer.pal(5,'Dark2'))
successterms$success <- 'successful'
successterms <- arrange(successterms,n) %>% arrange(n)
unsuccessterms$success <- 'unsuccessful'
unsuccessterms <- arrange(unsuccessterms,n) %>% arrange(n)
unsuccessterms$n <- -1*(unsuccessterms$n)
terms <- rbind(successterms, unsuccessterms)
terms$n <- as.integer(terms$n)
terms$frequency <- ifelse(terms$n < 0, (-1)*terms$n, terms$n)
termsa <- aggregate(frequency ~ term, terms, sum, na.rm=TRUE) %>% arrange(desc(frequency))
termsb <- merge(terms, termsa, by='term')
termsb <- termsb %>% arrange(desc(frequency.y)) %>% top_n(30, frequency.y)
ggplot(termsb, aes(x=reorder(term,n),y=n, fill=success)) +
geom_bar(data=filter(termsb, success=='successful'), stat='identity') +
geom_bar(data=filter(termsb, success=='unsuccessful'), stat='identity') +
coord_flip() +
geom_col() +
scale_y_continuous(breaks=seq(-150,150,25)) +
labs(title = "Pyramid Plot of Top Words From Kickstarter Projects",
x = "Words", y = "Count")
read <- textstat_readability(as.character(success$blurb), measure=c('Flesch','Flesch.Kincaid','meanSentenceLength','meanWordSyllables'))
read[colnames(success)] <- success
y <- rnorm(10) * 100000
ggplot(read, aes(x=Flesch,y=pledged,color=state)) + geom_col() + scale_y_continuous(labels=comma) + labs(title='Flesch Score vs Pledged Amount')
ggplot(read, aes(x=Flesch,y=backers_count,color=state)) + geom_col() + scale_y_continuous(labels=comma) + labs(title='Flesch Score vs Amount of Backers')
pos <- read.table('positive-words.txt', as.is=T)
neg <- read.table('negative-words.txt', as.is=T)
sentiment <- function(words=c("really great good stuff bad")){
require(quanteda)
tok <- quanteda::tokens(words)
pos.count <- sum(tok[[1]]%in%pos[,1])
neg.count <- sum(tok[[1]]%in%neg[,1])
out <- (pos.count - neg.count)/(pos.count+neg.count)
pos_words <- tok[[1]][which(tok[[1]] %in% pos[,1])]
neg_words <- tok[[1]][which(tok[[1]] %in% neg[,1])]
return(list(pos.count, neg.count, out, list(pos_words), list(neg_words)))
}
success$pos <- NA
success$neg <- NA
success$out <- NA
success$pos_words <- NA
success$neg_words <- NA
for(i in 1:length(success$blurb)) {
temp_sent <- sentiment(as.character(success$blurb[[i]]))
success$pos[[i]] <- temp_sent[[1]]
success$neg[[i]] <- temp_sent[[2]]
success$out[[i]] <- temp_sent[[3]]
success$pos_words[[i]] <- toString(unlist(temp_sent[[4]]))
success$neg_words[[i]] <- toString(unlist(temp_sent[[5]]))
}
success_tone <- success %>%
filter(!is.nan(out))
unsuccess$pos <- NA
unsuccess$neg <- NA
unsuccess$out <- NA
unsuccess$pos_words <- NA
unsuccess$neg_words <- NA
for(i in 1:length(unsuccess$blurb)) {
temp_sent <- sentiment(as.character(success$blurb[[i]]))
unsuccess$pos[[i]] <- temp_sent[[1]]
unsuccess$neg[[i]] <- temp_sent[[2]]
unsuccess$out[[i]] <- temp_sent[[3]]
unsuccess$pos_words[[i]] <- toString(unlist(temp_sent[[4]]))
unsuccess$neg_words[[i]] <- toString(unlist(temp_sent[[5]]))
}
unsuccess_tone <- unsuccess %>%
filter(!is.nan(out))
y <- rnorm(10) * 100000
x <- seq(0,1,length=10)
ggplot(success_tone, aes(x=out, y=backers_count)) + labs(title = 'Sentiment vs Amount of Backers', x='sentiment', y='amount of backers') + geom_col() + coord_flip()+ scale_y_continuous(labels=comma)
tone <- rbind(success_tone, unsuccess_tone)
tone <- filter(tone, out != 0)
positive <- paste(filter(tone, out == 1)$blurb, collapse = '')
negative <- paste(filter(tone, out == -1)$blurb, collapse = '')
doc_id <- c(1,2)
posnev <- data.frame(doc_id, text=c(positive, negative), stringAsFactors=FALSE)
posnev <- DataframeSource(posnev)
posnevcorpus <- VCorpus(posnev)
posnevtidy <- tidy(posnevcorpus)
posnevclean <- posnevtidy$text %>% tolower() %>% removePunctuation() %>% removeNumbers() %>% stripWhitespace() %>% removeWords(stopwords('en'))
posnevvector <- VectorSource(posnevclean)
posnevcorp <- VCorpus(posnevvector)
posnevtmd<- TermDocumentMatrix(posnevcorp)
posnevm <- as.matrix(posnevtmd)
comparison.cloud(posnevm,colors=c('blue','red'), scale=c(0.05,2),title.size=1,max.words=50)
bing <- tidytext::sentiments
bingcols <- unique(bing$sentiment)
bingcols <- bingcols[!is.na(bingcols)]
posnev1 <- rbind(success, unsuccess)
posnev1[bingcols] <- 0
#anger, anticipation, disgust, fear, joy, sadness, surprise, trust, positive, happy
for(i in 1:length(posnev1$blurb)) {
tok <- tokens(as.character(posnev1$blurb[[i]]))
posnev1$anger[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='anger')$word)
posnev1$anticipation[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='anticipation')$word)
posnev1$disgust[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='disgust')$word)
posnev1$fear[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='fear')$word)
posnev1$joy[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='joy')$word)
posnev1$sadness[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='sadness')$word)
posnev1$surprise[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='surprise')$word)
posnev1$trust[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='trust')$word)
posnev1$happy[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='happy')$word)
posnev1$positive[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='positive')$word)
posnev1$negative[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='negative')$word)
}
tone <- rbind(success_tone, unsuccess_tone)
tone <- filter(tone, out != 0)
positive <- paste(filter(tone, out == 1)$blurb, collapse = '')
negative <- paste(filter(tone, out == -1)$blurb, collapse = '')
doc_id <- c(1,2)
posnev <- data.frame(doc_id, text=c(positive, negative), stringAsFactors=FALSE)
posnev <- DataframeSource(posnev)
posnevcorpus <- VCorpus(posnev)
posnevtidy <- tidy(posnevcorpus)
posnevclean <- posnevtidy$text %>% tolower() %>% removePunctuation() %>% removeNumbers() %>% stripWhitespace() %>% removeWords(stopwords('en'))
posnevvector <- VectorSource(posnevclean)
posnevcorp <- VCorpus(posnevvector)
posnevtmd<- TermDocumentMatrix(posnevcorp)
posnevm <- as.matrix(posnevtmd)
comparison.cloud(posnevm,colors=c('green','red'), scale=c(0.05,2),title.size=1,max.words=50)
tone <- rbind(success_tone, unsuccess_tone)
tone <- filter(tone, out != 0)
positive <- paste(filter(tone, out == 1)$blurb, collapse = '')
negative <- paste(filter(tone, out == -1)$blurb, collapse = '')
doc_id <- c(1,2)
posnev <- data.frame(doc_id, text=c(positive, negative), stringAsFactors=FALSE)
posnev <- DataframeSource(posnev)
posnevcorpus <- VCorpus(posnev)
posnevtidy <- tidy(posnevcorpus)
posnevclean <- posnevtidy$text %>% tolower() %>% removePunctuation() %>% removeNumbers() %>% stripWhitespace() %>% removeWords(stopwords('en'))
posnevvector <- VectorSource(posnevclean)
posnevcorp <- VCorpus(posnevvector)
posnevtmd<- TermDocumentMatrix(posnevcorp)
posnevm <- as.matrix(posnevtmd)
comparison.cloud(posnevm,colors=c('dark green','red'), scale=c(0.05,2),title.size=1,max.words=50)
bing <- tidytext::sentiments
bingcols <- unique(bing$sentiment)
bingcols <- bingcols[!is.na(bingcols)]
posnev1 <- rbind(success, unsuccess)
posnev1[bingcols] <- 0
#anger, anticipation, disgust, fear, joy, sadness, surprise, trust, positive, happy
for(i in 1:length(posnev1$blurb)) {
tok <- tokens(as.character(posnev1$blurb[[i]]))
posnev1$anger[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='anger')$word)
posnev1$anticipation[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='anticipation')$word)
posnev1$disgust[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='disgust')$word)
posnev1$fear[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='fear')$word)
posnev1$joy[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='joy')$word)
posnev1$sadness[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='sadness')$word)
posnev1$surprise[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='surprise')$word)
posnev1$trust[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='trust')$word)
posnev1$happy[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='happy')$word)
posnev1$positive[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='positive')$word)
posnev1$negative[[i]] <- sum(tok[[1]] %in% filter(bing, sentiment=='negative')$word)
}
posnev1$emotion <- colnames(posnev1[bingcols])[apply(posnev1[bingcols],1,which.max)]
x <- rnorm(10) * 100000
y <- seq(0,1,length=10)
ggplot(posnev1, aes(x=pledged, y=backers_count, color=emotion)) + geom_col() + scale_x_continuous(labels=comma) + labs(title='Pledged vs Number of Backers Based on Emotions',y='amount of backers',x='pledged')
kick1 <- kick %>% select(state, backers_count, pledged, top_category, blurb, id)
kick1a <- aggregate(backers_count~top_category + state, kick1, sum, na.rm=TRUE) %>% arrange(desc(backers_count))
y <- rnorm(10) * 100000
x <- seq(0,1,length=10)
kick1a %>% mutate(top_category = fct_reorder(top_category, backers_count)) %>% ggplot(aes(x = top_category,
y = backers_count, fill = state)) +
geom_col() +
coord_flip()+ scale_y_continuous(labels=comma) +
labs(title = "Number of Backers for Kickstarter Categories",
x = "Category", y = "Number of Backers")
kick1aa <- aggregate(pledged~top_category + state, kick1, sum, na.rm=TRUE) %>% arrange(desc(pledged))
y <- rnorm(10) * 100000
x <- seq(0,1,length=10)
kick1aa %>% mutate(top_category = fct_reorder(top_category, pledged)) %>% ggplot(aes(x = top_category,
y = pledged, fill = state)) +
geom_col() +
coord_flip()+ scale_y_continuous(labels=comma) +
labs(title = "Anmount Pledged for Kickstarter Categories",
x = "Category", y = "Number of Backers")
shiny::runApp('Documents/GitHub/Group-E_Climate-Real-Estate/Shiny Draft')
output$line_chart_neworleans <- renderPlotly({plot_ly(refined_orleans_data, x = ~date, y =~single_fam_val, type = 'scatter', mode = 'lines', name = 'New Orleans Median Prices')})
output$line_chart_moore <- renderPlotly({plot_ly(refined_moore_data, x = ~date, y =~single_fam_val, type = 'scatter', mode = 'lines', name = 'Moore Median Prices')})
output$line_chart_buffalo <- renderPlotly({plot_ly(refined_buffalo_data, x = ~date, y =~single_fam_val, type = 'scatter', mode = 'lines', name = 'Buffalo Median Prices')})
output$line_chart_coffeypark <- renderPlotly({plot_ly(refined_coffey_park_data, x = ~date, y =~single_fam_val, type = 'scatter', mode = 'lines', name = 'Coffey Park Median Prices')})
output$line_chart_grandisle <- renderPlotly({plot_ly(refined_orleans_data, x = ~date, y =~single_fam_val, type = 'scatter', mode = 'lines', name = 'Grand Isle Median Prices')})
coffeypark_bar_data <- bar_chart_data %>% filter(city == 'Coffey Park')
setwd("/Users/tsaijeffray/Documents/GitHub/Group-E_Climate-Real-Estate/Shiny Draft")
bar_chart_data <- read.csv('bar_chart_data.csv')
coffeypark_bar_data <- bar_chart_data %>% filter(city == 'Coffey Park')
orleans_bar_data <- bar_chart_data %>% filter(city == 'New Orleans')
moore_bar_data <- bar_chart_data %>% filter(city == 'Moore')
grandisle_bar_data <- bar_chart_data %>% filter(city == 'Grand Isle')
buffalo_bar_data <- bar_chart_data %>% filter(city == 'Buffalo')
onefourtwoohone <- buffalo_chart_data %>% filter(zip_code=='14201')
onefourtwoohone <- buffalo_bar_data %>% filter(zip_code=='14201')
#we only want one zip code at a time
plot_ly(onefourtwoohone, x=~date, y=~single_fam_val, group=~zip_code, color=~date, type='bar') %>% layout(legend = list(orientation = "h",   # show entries horizontally
xanchor = "center",
x = 0.5,y=-0.2), yaxis = list(
range=c(130000,145000)))
runApp('Documents/GitHub/Group-E_Climate-Real-Estate/Shiny Draft')
runApp()
runApp('Documents/GitHub/Group-E_Climate-Real-Estate/Shiny Draft')
shiny::runApp('Documents/GitHub/Group-E_Climate-Real-Estate/Shiny Draft')
shiny::runApp()
install.packages('rsconnect')
rsconnect::deployApp()
rsconnect::setAccountInfo(name='jtsai97', token='989F035FB1D9E22C83C7E0D4ABF01AD8', secret='2FlFwpEuKmENwbIVaNuL53d6HNV3GQL6rpYaS2yZ')
rsconnect::deployApp('path/to/your/app')
rsconnect::deployApp('/Users/tsaijeffray/Documents/GitHub/Group-E_Climate-Real-Estate')
rsconnect::deployApp('/Users/tsaijeffray/Documents/GitHub/Group-E_Climate-Real-Estate')
rsconnect::showLogs(
a
)
rsconnect::showLogs()
rsconnect::deployApp('/Users/tsaijeffray/Documents/GitHub/Group-E_Climate-Real-Estate/Shiny Draft')
rsconnect::showLogs()
runApp()
runApp()
runApp()
