cores = 1)
poisson_post <- stan_glm(NB_Claim ~ Insured.age + Car.age + Credit.score + Annual.miles.drive +
Years.noclaims + Annual.pct.driven + Total.miles.driven + Pct.drive.mon +
Pct.drive.tue,
data = training_2,
family = poisson,
seed = 123456,
offset = log(Duration),
QR = TRUE,
iter = 1000,
chains = 3,
cores = 1)
pp_check(poisson_post, plotfun = "bars_grouped", group = training_2$NB_Claim)
library(rstanarm)
library(dplyr)
library(ggplot2)
library(tidyr)
library(ggplot2)
library(patchwork)
library(haven)
set.seed(04092022)
# load data set
CPS <- as_factor(read_dta(dir(pattern = "^cepr_.*dta$")))
# filter to my birthday month
CPS <- CPS %>% filter(month == "9")
defs <- sapply(CPS, FUN = attr, which = "label")
vals <- sapply(CPS, FUN = attr, which = "levels")
# identify columns that are completely NA because I will remove these from my analysis
sapply(CPS, function(x)all(is.na(x)))
N <- nrow(CPS)
# create a new x matrix with columns that do not have any x values
x <- CPS[, !colnames(CPS) %in% c("hhid", "hhid2", "hrsmple", "hrsersuf", "hrlonglk",
"wholine", "reltoref", "proxy", "peernuot", "uearnwke",
"why3594", "abpaid", "absent94", "reason94", "principalcty",
"fipscounty", "occ_m03", "occ12", "occ11", "occ03",
"occ03", "occ70", "hrsvary", "pehrusl1", "pehrusl2",
"pehruslt", "peernhro", "imphrs", "pehrusl", "hourslwm",
"manag03", "ind03", "ind09", "ind1m", "ind14", "ind_m03",
"docc70", "docc03", "ind70", "ind_2d", "la", "nyc", "cbsasz",
"certgov", "cert", "hrsample", "lonwgt", "famwgt", "wbhaom",
"wbhom", "racehpia", "racehpi", "racea", "forborn", "citizen",
"prcitshp", "arrived", "prinusyr", "jobloser", "prhrusl",
"entrant", "pdemp2", "jobleaver", "faminc", "refper", "pemntvty",
"pefntvty", "pentvty", "multjobn", "multjob", "pdemp1",
"cmsacode14", "cmsacode05", "smsastat05", "smsastat14", "relahh",
"cow", "unemdur", "nmemp1", "nmemp2", "cow1", "famrel94",
"marstat", "penatvty", "cow2", "ind12", "tc")]
x$non_white <- ifelse(x$wbhao != "White", 1, 0)
# education is recoded once I run the above function
colnames(x)
x_hoh <- x$hoh79
x_female <- x$female
x_age <- x$age
x_non_white <- x$non_white
x_ch05 <- x$ch05
x_ch613 <- x$ch613
x_ch1417 <- x$ch1417
# fill in NAs with 0s
x_ch05 <- sapply(x_ch05, function(lala) ifelse(is.na(lala) == TRUE, 0, lala))
x_ch613 <- sapply(x_ch613, function(lala) ifelse(is.na(lala) == TRUE, 0, lala))
x_ch1417 <- sapply(x_ch1417, function(lala) ifelse(is.na(lala) == TRUE, 0, lala))
x_married <- x$married
x_married <- sapply(x_married, function(lala) ifelse(is.na(lala) == TRUE, 0, lala))
x_educ <- x$educ
x_educ <- sapply(x_educ, function(lala) ifelse(is.na(lala) == TRUE, 0, lala))
x_metro <- x$metro
x_metro <- sapply(x_metro, function(lala) ifelse(is.na(lala) == TRUE, 0, lala))
my_draws <- replicate(1000,{
####################################################
### SCENARIO 1: predict being in the labor force ###
b_hoh79 <- rnorm(1, mean = 5, sd = 10) # I believe that being the head of household means you're very likely to seek work
b_female <- rnorm(1, mean = -8, sd = 10) # I believe that women are less likely to be in the labor force
b_age <- rnorm(1, mean = 0, sd = 2) # You can work at pretty much any age, but you're more likely to look for work if you're older than
# college student
b_nonwhite <- rnorm(1, mean = -8, sd = 8) # white people are more likely to be in the labor force
# dependents
# likely cares for the kid and the other seeks work, so it's a wash
b_ch05 <- rnorm(1, mean = -4, sd = 10)
b_ch613 <- rnorm(1, mean = -3, sd = 10)
b_ch1417 <- rnorm(1, mean = -2, sd = 5) # if children are older, parents are more likely to seek work
b_married <- rnorm(1, mean = -2, sd = 8) # less likely for one person in a marriage not to seek work in 1992
b_educ <- rnorm(1, mean = 1, sd = 8) # higher education is not a requirement to get a job so educ adds small bump to likelihood that they're in labor force
# geographical variables
b_metro <- rnorm(1, mean = 2, sd = 10)
intercept <- rnorm(1, mean = 65, sd = 10)
##############################################################################
### Scenario 2: Predict having a job if that person were in the labor force###
# I have much narrower sd's because I know that most people are in the labor force (only ~5% are unemployed)
b2_hoh79 <- rnorm(1, mean = 3, sd = 6)
b2_female <- rnorm(1, mean = -8, sd = 8) # I believe that women are less likely to find work
b2_age <- rnorm(1, mean = 0, sd = 1)
b2_nonwhite <- rnorm(1, mean = -10, sd = 8)
# dependents
b2_ch05 <- rnorm(1, mean = -5, sd = 6)  # less likely to find a job that works with taking care of a child
b2_ch613 <- rnorm(1, mean = -3, sd = 6)
b2_ch1417 <- rnorm(1, mean = -2, sd = 6)
b2_married <- rnorm(1, mean = -2, sd = 5) # if both people want to work, most likely that both are working
b2_educ <- rnorm(1, mean = 0, sd = 5) # Education shouldn't matter in my belief because people didn't need higher education to land a job in 1992
# geographical variables
b2_metro <- rnorm(1, mean = 5, sd = 5)
# I think the economy was probably decent in 1992 and most people were employed, so my intercept should be above 50 (that someone is employed)
intercept2 <- rnorm(1, mean = 95, sd = 1)
## PREDICTOR 1 equation (like the link function)
mu_1 <- intercept + b_hoh79 * x_hoh + b_female * x_female + b_age * x_age + b_nonwhite * x_non_white + b_married * x_married +
b_educ * x_educ + b_ch05 * x_ch05 + b_ch613 * x_ch613 + b_ch1417 * x_ch1417 + b_metro * x_metro
## PREDICTOR 2 equation (like the link function)
mu_2 <- intercept2 + b2_hoh79 * x_hoh + b2_female * x_female + b2_age * x_age + b2_nonwhite * x_non_white +
b2_married * x_married + b2_educ * x_educ + b2_ch05 * x_ch05 + b2_ch613 * x_ch613 + b2_ch1417 * x_ch1417 + b2_metro * x_metro
# simulating the error
rho <- 0.1 # this is the correlation between my linear predictors
drawn_error <- rnorm(n = N, mean = 0, sd = 1)
drawn_error_2 <- rnorm(n = N, mean = 0 + rho * (drawn_error - 0), sd = 1 * sqrt(1 - rho^2))
lin_pred_1 <- mu_1 + drawn_error
lin_pred_2 <- mu_2 + drawn_error_2
## PREDICTOR 2
y <- ifelse(lin_pred_1 < 0, -1, ifelse(lin_pred_2 < 0, 0, 1))
return(y)
})
# confirming that my new matrix is N rows and 1000 columns
dim(my_draws)
# create new summary matrix
draw_summary <- matrix(NA, ncol = 3, nrow = N)
colnames(draw_summary) <- c("val_0", "val_-1", "val_1")
# fill it in based on the values generated
for (i in 1:ncol(my_draws)) {
draw_summary[i, 1] <- length(which(my_draws[i, ] == 0))
draw_summary[i, 2] <- length(which(my_draws[i, ] == -1))
draw_summary[i, 3] <- length(which(my_draws[i, ] == 1))
}
prior_distributions <- draw_summary/rowSums(draw_summary)
plot1 <- ggplot(tibble(neg_one = c(prior_distributions[,c("val_-1")]))) +
geom_density(aes(x = neg_one)) +
ggtitle("Value = -1")
plot2 <- ggplot(tibble(zero = c(prior_distributions[,c("val_0")]))) +
geom_density(aes(x = zero)) +
ggtitle("Value = 0")
plot3 <- ggplot(tibble(val1 = c(prior_distributions[,c("val_1")]))) +
geom_density(aes(x = val1)) +
ggtitle("Value = 1")
(plot1 | plot2) / plot3
x$ilf <- 1 - x$nilf
# make copy of matrix x where we fill in NAs
x_probit <- sapply(x, function(lala) ifelse(is.na(lala) == TRUE, 0, lala)) %>% as.data.frame()
probit_post <- stan_glm(ilf  ~ hoh79 + female + non_white + metro + married + ownchild + ch05 + ch613 + ch1417 + age + educ,
seed = 200,
QR = TRUE,
data = x_probit,
family = binomial(link = "probit"),
init_r = 0.25,
iter = 1000,
chains = 3,
cores = 2)
print(probit_post, digits = 2)
plot(probit_post, pars = c("hoh79", "female", "non_white", "metro", "married", "ownchild", "ch05", "ch613", "ch1417", "age", "educ"))
UBI <- readr::read_csv("http://www2.math.uconn.edu/~valdez/telematics_syn-032021.csv", show_col_types = FALSE)
training <- UBI[1:50000,]
testing <- UBI[-(1:50000),]
training_2 <- training %>%
mutate(sex_dummy = ifelse(Insured.sex == "Male", 1, 0),
marital_dummy = ifelse(Marital == "Married", 1, 0),
region_dummy = ifelse(Region == "Urban", 1, 0),
caruse_urbn_dummy = ifelse(Car.use == "Commute", 1, 0),
caruse_private_dummy = ifelse(Car.use == "Private", 1, 0),
caruse_farmer_dummy = ifelse(Car.use == "Farmer", 1, 0)) %>%
select(-c(Insured.sex, Marital, Car.use, Region))
poisson_post <- stan_glm(NB_Claim ~ Annual.pct.driven + Pct.drive.mon + `Pct.drive.rush am` + Pct.drive.4hrs,
data = training_2,
family = poisson,
seed = 50,
offset = log(Duration),
iter = 1500,
chains = 3)
poisson_post <- stan_glm(NB_Claim ~ Annual.pct.driven + Pct.drive.mon + `Pct.drive.rush am` + Pct.drive.4hrs,
data = training_2,
family = poisson,
seed = 50,
offset = log(Duration),
iter = 1500,
chains = 2)
poisson_post <- stan_glm(NB_Claim ~ Annual.pct.driven + Pct.drive.mon + `Pct.drive.rush am` + Pct.drive.4hrs,
data = training_2,
family = poisson,
seed = 500,
offset = log(Duration),
iter = 1000,
chains = 3)
negbinom_post <- update(poisson_post, family = neg_binomial_2)
plot1 <- pp_check(poisson_post, plotfun = "bars")
plot2 <- pp_check(negbinom_post, plotfun = "bars")
plot1 / plot2
poisson_loo <- loo(poisson_post, k_threshold > 0.7)
poisson_loo <- loo(poisson_post, k_threshold = 0.7)
negbinom_loo <- loo(negbinom_post, k_threshold = 0.7)
plot(poisson_loo, label_points = TRUE)
plot(negbinom_loo, label_points = TRUE)
negbinom_loo <- loo(negbinom_post)
negbinom_loo <- loo(negbinom_post)
plot(negbinom_loo, label_points = TRUE)
plot(negbinom_loo, label_points = TRUE)
plot(negbinom_loo, label_points = TRUE)
pois_ll <- log_lik(poisson_post, newdata = testing)
negbinom_ll <- log_lik(negbinom_post, newdata = testing)
loo_compare(pois_ll, negbinom_ll)
plot(negbinom_loo, label_points = TRUE)
pois_ll <- rstanarm::log_lik(poisson_post, offset = log(Duration), newdata = testing)
pois_ll <- rstanarm::log_lik(poisson_post, offset = log(testing$Duration), newdata = testing)
negbinom_ll <- rstanarm::log_lik(negbinom_post, offset = log(testing$Duration), newdata = testing)
loo_compare(pois_ll, negbinom_ll)
pois_ll <- rstanarm::log_lik(poisson_post, offset = c(0, 0), newdata = testing)
pois_ll <- rstanarm::log_lik(poisson_post, offset = matrix(0,nrow = 50000), newdata = testing)
loo_compare(pois_ll, negbinom_ll)
negbinom_ll <- rstanarm::log_lik(negbinom_post, offset = matrix(0,nrow = 50000), newdata = testing)
loo_compare(pois_ll, negbinom_ll)
rowSum(pois_ll)
rowSums(pois_ll)
gamma_post <- stan_glm(NB_Claim ~ Car.age + Years.noclaims + Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = training_2,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = TRUE)
str(training_2)
summary(training_2)
gamma_post <- stan_glm(NB_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = training_2,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = TRUE)
gamma_post <- stan_glm(NB_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12,
data = training_2,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = TRUE)
summary(test)
training_subset <- training_2 %>%
filter(NB_claim > 0) %>%
mutate(AMT_per_claim = AMT_claim / NB_claim)
training_subset <- training_2 %>%
filter(NB_Claim > 0) %>%
mutate(AMT_per_claim = AMT_claim / NB_Claim)
training_subset <- training_2 %>%
filter(NB_Claim > 0) %>%
mutate(AMT_per_claim = AMT_Claim / NB_Claim)
gamma_post <- stan_glm(AMT_per_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = training_2,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = FALSE)
gamma_post <- stan_glm(AMT_per_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = training_subset,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = FALSE)
gamma_post <- stan_glm(AMT_per_claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = training_subset,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = FALSE)
summary(training_subset)
# poisson
print(mean(rowSums(pois_ll)))
# negative binomial
print(mean(rowSums(negbinom_ll)))
loo_compare(poisson_loo, negbinom_loo)
gamma_post <- stan_glm(NB_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = training_2,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = TRUE)
at_least_1 <- training_2 %>% filter(NB_Claim > 0)
gamma_post <- stan_glm(NB_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = at_least_1,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = TRUE)
gamma_prior <- stan_glm(NB_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = at_least_1,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = TRUE)
print(gamma_prior)
gamma_prior <- stan_glm(AMT_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = at_least_1,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = TRUE)
summary(at_least_1$AMT_Claim)
at_least_1 <- training_2 %>% filter(NB_Claim > 0) %>% mutate(AMT_Claim = ifelse(AMT_Claim == 0, 0.01, AMT_Claim)
gamma_prior <- stan_glm(AMT_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
at_least_1 <- training_2 %>% filter(NB_Claim > 0) %>% mutate(AMT_Claim = ifelse(AMT_Claim == 0, 0.01, AMT_Claim))
gamma_prior <- stan_glm(AMT_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = at_least_1,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = TRUE)
print(gamma_prior)
pp_check(gamma_prior)
pp_check(gamma_prior, fun = "bars")
pp_check(gamma_prior, plotfun = "bars")
pp_check(gamma_prior, plotfun = "scatter_avg")
pp_check(gamma_prior)
pp_check(gamma_prior, plotfun = "scatter_avg")
View(at_least_1)
at_least_1 <- training_2 %>% filter(NB_Claim > 0, AMT_Claim > 0)
gamma_prior <- stan_glm(AMT_Claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = at_least_1,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = TRUE)
print(gamma_prior)
pp_check(gamma_prior, plotfun = "scatter_avg")
training_subset <- training_2 %>%
filter(NB_Claim > 0, ) %>%
mutate(AMT_per_claim = AMT_Claim / NB_Claim)
gamma_post <- stan_glm(AMT_per_claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = training_subset,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = FALSE)
training_subset <- training_2 %>%
filter(NB_Claim > 0, AMT_CLaim > 0) %>%
mutate(AMT_per_claim = AMT_Claim / NB_Claim)
training_subset <- training_2 %>%
filter(NB_Claim > 0, AMT_Claim > 0) %>%
mutate(AMT_per_claim = AMT_Claim / NB_Claim)
gamma_post <- stan_glm(AMT_per_claim ~ Annual.pct.driven + Pct.drive.mon  + `Pct.drive.rush am` +
Pct.drive.wkend + Accel.12miles + Left.turn.intensity12 + Right.turn.intensity12 + sex_dummy,
data = training_subset,
offset = log(Duration),
family = Gamma(link = "log"),
prior_PD = FALSE)
pp_check(gamma_post, plotfun = "scatter_avg")
gamma_prior_predictions <- posterior_predict(gamma_prior)
ggplot(tibble(AMT = c(gamma_prior_predictions))) + geom_density(aes(x = AMT))
Sys.getenv("BINPREF")
install.packages("RTools")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.which("make")
library(RTools)
Sys.which("make")
Sys.getenv("BINPREF")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("RTools")
?version
R.Version
R.version$os
R.version
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
library(haven)
library(brms)
library(rstanarm)
library(dplyr)
set.seed(1234)
options(mc.cores = parallel::detectCores())
library(haven)
library(brms)
library(rstanarm)
library(dplyr)
set.seed(1234)
options(mc.cores = parallel::detectCores())
if (!file.exists("GSS_2020_panel_stata_1a.zip")) {
download.file("https://gss.norc.org/Documents/stata/GSS_2020_panel_stata_1a.zip",
destfile = "GSS_2020_panel_stata_1a.zip")
unzip("GSS_2020_panel_stata_1a.zip")
}
GSS <- as_factor(read_dta(file.path("gss2020panel_r1a.dta")))
#unzip("anes_timeseries_2020_gss_stata_20220408.zip")
ANES <- as_factor(read_dta(file.path("anes_timeseries_2020_gss_stata_20220408.dta")))
ANES_GSS <- inner_join(ANES, GSS, by = c(YEARID = "yearid"))
# clean up data set to remove
ANES_GSS_clean <- ANES_GSS %>%
filter(!is.na(degree_1b)) %>%
filter(V202215 != "-9. Refused" &
V202215 != "-5. Interview breakoff (sufficient partial IW)") %>%
mutate(V202215_ordered = as.ordered(V202215),
degree_1b_ordered = as.ordered(factor(degree_1b,
levels = c("graduate",
"bachelor's",
"associate/junior college",
"high school",
"less than high school")))) %>%
select(V202215_ordered, degree_1b_ordered)
prior1 <- brms::brm(V202215_ordered ~ mo(degree_1b_ordered),
data = ANES_GSS_clean,
sample_prior = "only",
family = cumulative(link = "probit"),
prior = prior(normal(0,100), class = "b"),
seed = 10001,
iter = 5000,
chains = 4)
prior1
prior_draws <- posterior_predict(prior1)
summary(colMeans(prior_draws))
post <- brms::brm(V202215_ordered ~ mo(degree_1b_ordered),
data = ANES_GSS_clean,
family = cumulative(link = "probit"),
prior = prior(normal(0,100), class = "b"),
seed = 10001,
chains = 2)
post
plot(conditional_effects(post, effects = "degree_1b_ordered", categorical = FALSE))
plot(loo(post))
alt_post <- brms::brm(V202215_ordered ~ degree_1b_ordered,
data = ANES_GSS_clean,
family = cumulative(link = "probit"),
prior = prior(normal(0,100), class = "b"),
seed = 10001,
chains = 3)
plot(loo(alt_post))
post <- add_criterion(post, criterion = "loo")
alt_post <- add_criterion(alt_post, criterion = "loo")
loo_compare(post, alt_post)
posterior_draws <- posterior_predict(post)
summary(colMeans(posterior_draws))
summary(ANES_GSS_clean$degree_1b_ordered)
summary(ANES_GSS_clean$V202215_ordered)
shiny::runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
library(plotly)
shiny::runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/Shiny Draft')
shiny::runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp()
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp()
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp()
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp()
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp()
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
runApp()
runApp('GitHub/DataViz/Group-E_Climate-Real-Estate/main')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
